<Window x:Class="WpfApp_bing.Views.MainWindowPrism"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApp_bing.Views"
        xmlns:vm="clr-namespace:WpfApp_bing.ViewModels"
        mc:Ignorable="d"
        Title="WPF Binding 机制演示 - Prism版本" Height="400" Width="500">
    
    <!-- 设置DataContext为ViewModel -->
    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>

    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- 标题区域 -->
        <TextBlock Grid.Row="0" 
                   Text="WPF Binding机制对比演示" 
                   FontSize="16" 
                   FontWeight="Bold" 
                   HorizontalAlignment="Center" 
                   Margin="0,0,0,20"/>

        <!-- 主要内容区域 -->
        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
            <StackPanel>
                
                <!-- 学生信息显示区域 -->
                <GroupBox Header="学生信息展示" Margin="0,0,0,15">
                    <StackPanel Margin="10">
                        <!-- 使用Binding绑定到ViewModel的属性 -->
                        <TextBlock Text="{Binding DisplayText}" 
                                   FontSize="14" 
                                   FontWeight="Bold" 
                                   Foreground="Blue"
                                   Margin="0,0,0,10"/>
                        
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <Label Grid.Row="0" Grid.Column="0" Content="姓名：" VerticalAlignment="Center"/>
                            <TextBox Grid.Row="0" Grid.Column="1" 
                                     Text="{Binding CurrentStudent.Name, UpdateSourceTrigger=PropertyChanged}" 
                                     Margin="5,2"/>

                            <Label Grid.Row="1" Grid.Column="0" Content="年龄：" VerticalAlignment="Center"/>
                            <TextBox Grid.Row="1" Grid.Column="1" 
                                     Text="{Binding CurrentStudent.Age, UpdateSourceTrigger=PropertyChanged}" 
                                     Margin="5,2"/>

                            <Label Grid.Row="2" Grid.Column="0" Content="邮箱：" VerticalAlignment="Center"/>
                            <TextBox Grid.Row="2" Grid.Column="1" 
                                     Text="{Binding CurrentStudent.Email, UpdateSourceTrigger=PropertyChanged}" 
                                     Margin="5,2"/>
                        </Grid>
                    </StackPanel>
                </GroupBox>

                <!-- 操作区域 -->
                <GroupBox Header="操作演示" Margin="0,0,0,15">
                    <StackPanel Margin="10">
                        <!-- 输入框演示双向绑定 -->
                        <Label Content="输入新姓名："/>
                        <TextBox Text="{Binding InputText, UpdateSourceTrigger=PropertyChanged}" 
                                 Margin="0,0,0,10"/>
                        
                        <!-- 按钮使用Command绑定，而不是传统的Click事件 -->
                        <UniformGrid Columns="3" Margin="0,10,0,0">
                            <Button Content="增加年龄" 
                                    Command="{Binding AddAgeCommand}"
                                    Margin="2"
                                    Padding="5"/>
                            
                            <Button Content="更新姓名" 
                                    Command="{Binding UpdateNameCommand}"
                                    Margin="2"
                                    Padding="5"/>
                            
                            <Button Content="重置数据" 
                                    Command="{Binding ResetDataCommand}"
                                    Margin="2"
                                    Padding="5"/>
                        </UniformGrid>
                    </StackPanel>
                </GroupBox>

                <!-- 说明区域 -->
                <GroupBox Header="Prism框架优势说明">
                    <StackPanel Margin="10">
                        <TextBlock TextWrapping="Wrap" LineHeight="18">
                            <Run Text="1. " FontWeight="Bold"/>
                            <Run Text="属性通知机制：使用SetProperty方法，一行代码完成属性设置和通知"/>
                            <LineBreak/>
                            <Run Text="2. " FontWeight="Bold"/>
                            <Run Text="MVVM模式：完全分离视图和业务逻辑，提高代码可维护性"/>
                            <LineBreak/>
                            <Run Text="3. " FontWeight="Bold"/>
                            <Run Text="Command模式：替代传统事件处理，支持CanExecute功能"/>
                            <LineBreak/>
                            <Run Text="4. " FontWeight="Bold"/>
                            <Run Text="双向绑定：UI和数据模型自动同步，无需手动更新"/>
                            <LineBreak/>
                            <Run Text="5. " FontWeight="Bold"/>
                            <Run Text="测试友好：ViewModel可以独立进行单元测试"/>
                        </TextBlock>
                    </StackPanel>
                </GroupBox>
            </StackPanel>
        </ScrollViewer>

        <!-- 底部状态栏 -->
        <StatusBar Grid.Row="2">
            <StatusBarItem>
                <TextBlock Text="使用Prism框架优化的WPF Binding机制演示"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>

<!-- 
XAML中的Binding语法对比：

1. 传统方式（MainWindow.xaml）：
   - 简单的单向绑定
   - 在CodeBehind中手动创建Binding对象
   - 事件处理使用Click等传统事件

2. Prism方式（MainWindowPrism.xaml）：
   - 声明式绑定，直接在XAML中指定
   - 支持复杂的绑定表达式
   - 使用Command绑定替代事件处理
   - UpdateSourceTrigger=PropertyChanged 实现实时更新
   - 数据绑定更加灵活和强大
-->